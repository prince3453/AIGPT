# Azure DevOps Pipeline for React Frontend
trigger:
  branches:
    include:
    - dev
    - main
    - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18.x'
  buildConfiguration: 'production'

stages:
- stage: Build
  displayName: 'Build and Test React App'
  jobs:
  - job: BuildTest
    displayName: 'Build and Test Job'
    steps:
    
    # Checkout code from repository
    - checkout: self
      displayName: 'Checkout Repository'
    
    # Setup Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Setup Node.js $(nodeVersion)'
    
    # Display Node and npm versions
    - script: |
        node --version
        npm --version
      displayName: 'Display Node and npm versions'
    
    # Cache node_modules for faster builds
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(System.DefaultWorkingDirectory)/node_modules
      displayName: 'Cache node_modules'
    
    # Install dependencies
    - script: npm ci
      displayName: 'Install Dependencies'
      condition: ne(variables.CACHE_RESTORED, 'true')
    
    # Run linting (if you have ESLint configured)
    - script: npm run lint
      displayName: 'Run Linting'
      continueOnError: true
    
    # Run tests
    - script: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
      displayName: 'Run Tests'
      env:
        CI: true
    
    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
    
    # Publish code coverage
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage/cobertura-coverage.xml'
        reportDirectory: 'coverage'
      displayName: 'Publish Code Coverage'
      condition: succeededOrFailed()
    
    # Build the React app
    - script: npm run build
      displayName: 'Build React App'
    
    # Archive build artifacts
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/react-app-$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive Build Artifacts'
    
    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'react-build'
        publishLocation: 'Container'
      displayName: 'Publish Build Artifacts'

- stage: LocalValidation
  displayName: 'Local Environment Validation'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: ValidateLocal
    displayName: 'Validate Local Setup'
    steps:
    
    # Download build artifacts
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'react-build'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Build Artifacts'
    
    # Extract and serve the build locally
    - script: |
        cd $(System.ArtifactsDirectory)/react-build
        unzip react-app-$(Build.BuildId).zip -d extracted-build
        cd extracted-build
        
        # Install a simple HTTP server
        npm install -g http-server
        
        # Start the server in background
        http-server -p 3000 -a localhost &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test if the application is accessible
        echo "Testing if React app is accessible on localhost:3000..."
        
        # Use curl to test the application
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
          echo "✅ React app is successfully running on localhost:3000"
          echo "##vso[task.setvariable variable=LocalTestResult]PASSED"
        else
          echo "❌ React app failed to load on localhost:3000"
          echo "##vso[task.setvariable variable=LocalTestResult]FAILED"
          exit 1
        fi
        
        # Kill the server
        kill $SERVER_PID
      displayName: 'Test Local Server Accessibility'